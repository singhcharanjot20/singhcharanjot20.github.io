{"status":"ok","feed":{"url":"https://medium.com/feed/@singhcharanjot20","title":"Stories by Charanjot Singh on Medium","link":"https://medium.com/@singhcharanjot20?source=rss-2fc5f4ddf492------2","author":"","description":"Stories by Charanjot Singh on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/0*Z6ropYMf2qXuQtg2.jpg"},"items":[{"title":"Why JAVA doesn\u2019t support Multiple Inheritance?","pubDate":"2020-05-20 20:18:18","link":"https://medium.com/@singhcharanjot20/why-java-doesnt-support-multiple-inheritance-ab1a10d1b57e?source=rss-2fc5f4ddf492------2","guid":"https://medium.com/p/ab1a10d1b57e","author":"Charanjot Singh","thumbnail":"https://cdn-images-1.medium.com/max/1012/1*JnnPgpVrnLN8PiYo8qvsRQ.png","description":"\n<h4>What is multiple inheritance?</h4>\n<p><strong>Multiple inheritance</strong> is an ability of a programming language to inherit the characteristics and features from more than one parent object or <a href=\"https://en.wikipedia.org/wiki/Superclass_(computer_science)\">parent\u00a0class</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1012/1*JnnPgpVrnLN8PiYo8qvsRQ.png\"><figcaption>Single Inheritance v/s Multiple Inheritance</figcaption></figure><p>Let\u2019s have a look at the below\u00a0example.</p>\n<a href=\"https://medium.com/media/c033b4a1b144092d1d53094e165bf8d8/href\">https://medium.com/media/c033b4a1b144092d1d53094e165bf8d8/href</a><p>The output of the above program is\u00a0:<br><strong>// Compile Time\u00a0error</strong></p>\n<h4>But why is compiler throwing the\u00a0error?</h4>\n<p>The problem is that when the Child class object calls the myFunc() method, the compiler gets confused as to whether call the myFunc() method of Class A or Class B. This concept is also called ambiguity in\u00a0C++.</p>\n<h4>What if I want to implement multiple inheritance in Java? Is there any workaround?</h4>\n<p>Yes of course, there is a way in which multiple inheritance can be implemented in Java. It is covered in <a href=\"https://medium.com/@singhcharanjot20?source=rss-2fc5f4ddf492------2#\">this\u00a0blog</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ab1a10d1b57e\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h4>What is multiple inheritance?</h4>\n<p><strong>Multiple inheritance</strong> is an ability of a programming language to inherit the characteristics and features from more than one parent object or <a href=\"https://en.wikipedia.org/wiki/Superclass_(computer_science)\">parent\u00a0class</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1012/1*JnnPgpVrnLN8PiYo8qvsRQ.png\"><figcaption>Single Inheritance v/s Multiple Inheritance</figcaption></figure><p>Let\u2019s have a look at the below\u00a0example.</p>\n<a href=\"https://medium.com/media/c033b4a1b144092d1d53094e165bf8d8/href\">https://medium.com/media/c033b4a1b144092d1d53094e165bf8d8/href</a><p>The output of the above program is\u00a0:<br><strong>// Compile Time\u00a0error</strong></p>\n<h4>But why is compiler throwing the\u00a0error?</h4>\n<p>The problem is that when the Child class object calls the myFunc() method, the compiler gets confused as to whether call the myFunc() method of Class A or Class B. This concept is also called ambiguity in\u00a0C++.</p>\n<h4>What if I want to implement multiple inheritance in Java? Is there any workaround?</h4>\n<p>Yes of course, there is a way in which multiple inheritance can be implemented in Java. It is covered in <a href=\"https://medium.com/@singhcharanjot20?source=rss-2fc5f4ddf492------2#\">this\u00a0blog</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ab1a10d1b57e\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["java","java-interface","multiple-inheritance","inheritance","core-java"]},{"title":"Java Interface\u200a\u2014\u200aThe implementation in RESTful APIs","pubDate":"2020-05-20 20:15:24","link":"https://medium.com/@singhcharanjot20/java-interface-the-implementation-in-restful-apis-f5d043789baf?source=rss-2fc5f4ddf492------2","guid":"https://medium.com/p/f5d043789baf","author":"Charanjot Singh","thumbnail":"https://cdn-images-1.medium.com/max/1024/0*rL6GDfl0u-Qwp3lh","description":"\n<h3>Java Interface\u200a\u2014\u200aThe implementation in RESTful\u00a0APIs</h3>\n<h3>What is an interface?</h3>\n<p>An interface is a purely abstract class. It means that an interface contains methods with no body. For\u00a0example:</p>\n<blockquote><strong><em>// interface<br>interface Fitness{<br> public void exercise(); // interface method (does not have a body)<br> public void jogging(); // interface method (does not have a body)<br>}</em></strong></blockquote>\n<h4>Why do we need an interface if it has no implementation?</h4>\n<ol>\n<li>One of the main advantages of the interface is that we achieve security as the interface method is empty but the class which implements the interface actually provides the functionality. <br>Therefore, an interface is nothing but a list of the services that will be provided by the application.</li>\n<li>The other advantage is that it allows us to implement multiple inheritance which is not supported by Java. You can read more about it\u00a0<a href=\"https://medium.com/@singhcharanjot20/why-java-doesnt-support-multiple-inheritance-ab1a10d1b57e?sk=f73ee598cad016e44facb1efc6b372e4\"><strong>here</strong></a><strong>.</strong>\n</li>\n</ol>\n<h4>Is it still too technical?</h4>\n<p>Have you ever been to an ATM? The moment you insert your card into the machine, you see a number of options that you can perform. That very screen is an <strong>interface.</strong></p>\n<p>The options like <strong><em>Statement Enquiry, Withdraw Cash, Change Pin etc. </em></strong>is an interface. It only shows the method names and details about what operation the method can\u00a0perform.</p>\n<p>So when you see <strong><em>Withdraw Cash, </em></strong>you know that you will be able to withdraw the cash once you press that option but the internal implementation of how the authorization is done and the cash of handed over to you is completely hidden.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*rL6GDfl0u-Qwp3lh\"></figure><p>So it will be correct to say that the ATM screen that you see is a <strong><em>purely abstract class</em></strong> a.k.a an <strong><em>interface.</em></strong></p>\n<h4>Interface implementation in REST\u00a0APIs</h4>\n<p>One of the most common uses of java these days is to develop a REST API. REST is an acronym for <strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer.</p>\n<p>The industry-standard structure that is followed to develop any API has the following 3 basic components\u00a0:<br><strong>1. Controller<br>2. Interface<br>3. InterfaceImpl</strong></p>\n<p>The controller contains the actual REST endpoint, so whenever the API receives a request, it lands on the controller.</p>\n<p>The interface is a purely abstract class. Whenever the request lands on the controller, it calls the respective abstract method from the interface in order to serve the implementation.</p>\n<p>The InterfaceImpl class is what actually provides the implementation.</p>\n<p><strong><em>Let\u2019s assume you have a requirement to develop an API such that whenever you make a GET request, it should return a random\u00a0number.</em></strong></p>\n<p>Controller.java</p>\n<a href=\"https://medium.com/media/b33cfd2be97f896bbaf325f860b80652/href\">https://medium.com/media/b33cfd2be97f896bbaf325f860b80652/href</a><p>MyInterface.java</p>\n<a href=\"https://medium.com/media/73b020162b74faf6954e7503702ee834/href\">https://medium.com/media/73b020162b74faf6954e7503702ee834/href</a><p>MyInterfaceImpl.java</p>\n<a href=\"https://medium.com/media/1886fd1f3b3653baad6e9446b84f72be/href\">https://medium.com/media/1886fd1f3b3653baad6e9446b84f72be/href</a><p>I hope you guys got the basic idea of what an interface is and how to use it. Please leave your feedback.</p>\n<p>Happy Coding\u00a0:)</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f5d043789baf\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Java Interface\u200a\u2014\u200aThe implementation in RESTful\u00a0APIs</h3>\n<h3>What is an interface?</h3>\n<p>An interface is a purely abstract class. It means that an interface contains methods with no body. For\u00a0example:</p>\n<blockquote><strong><em>// interface<br>interface Fitness{<br> public void exercise(); // interface method (does not have a body)<br> public void jogging(); // interface method (does not have a body)<br>}</em></strong></blockquote>\n<h4>Why do we need an interface if it has no implementation?</h4>\n<ol>\n<li>One of the main advantages of the interface is that we achieve security as the interface method is empty but the class which implements the interface actually provides the functionality. <br>Therefore, an interface is nothing but a list of the services that will be provided by the application.</li>\n<li>The other advantage is that it allows us to implement multiple inheritance which is not supported by Java. You can read more about it\u00a0<a href=\"https://medium.com/@singhcharanjot20/why-java-doesnt-support-multiple-inheritance-ab1a10d1b57e?sk=f73ee598cad016e44facb1efc6b372e4\"><strong>here</strong></a><strong>.</strong>\n</li>\n</ol>\n<h4>Is it still too technical?</h4>\n<p>Have you ever been to an ATM? The moment you insert your card into the machine, you see a number of options that you can perform. That very screen is an <strong>interface.</strong></p>\n<p>The options like <strong><em>Statement Enquiry, Withdraw Cash, Change Pin etc. </em></strong>is an interface. It only shows the method names and details about what operation the method can\u00a0perform.</p>\n<p>So when you see <strong><em>Withdraw Cash, </em></strong>you know that you will be able to withdraw the cash once you press that option but the internal implementation of how the authorization is done and the cash of handed over to you is completely hidden.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*rL6GDfl0u-Qwp3lh\"></figure><p>So it will be correct to say that the ATM screen that you see is a <strong><em>purely abstract class</em></strong> a.k.a an <strong><em>interface.</em></strong></p>\n<h4>Interface implementation in REST\u00a0APIs</h4>\n<p>One of the most common uses of java these days is to develop a REST API. REST is an acronym for <strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer.</p>\n<p>The industry-standard structure that is followed to develop any API has the following 3 basic components\u00a0:<br><strong>1. Controller<br>2. Interface<br>3. InterfaceImpl</strong></p>\n<p>The controller contains the actual REST endpoint, so whenever the API receives a request, it lands on the controller.</p>\n<p>The interface is a purely abstract class. Whenever the request lands on the controller, it calls the respective abstract method from the interface in order to serve the implementation.</p>\n<p>The InterfaceImpl class is what actually provides the implementation.</p>\n<p><strong><em>Let\u2019s assume you have a requirement to develop an API such that whenever you make a GET request, it should return a random\u00a0number.</em></strong></p>\n<p>Controller.java</p>\n<a href=\"https://medium.com/media/b33cfd2be97f896bbaf325f860b80652/href\">https://medium.com/media/b33cfd2be97f896bbaf325f860b80652/href</a><p>MyInterface.java</p>\n<a href=\"https://medium.com/media/73b020162b74faf6954e7503702ee834/href\">https://medium.com/media/73b020162b74faf6954e7503702ee834/href</a><p>MyInterfaceImpl.java</p>\n<a href=\"https://medium.com/media/1886fd1f3b3653baad6e9446b84f72be/href\">https://medium.com/media/1886fd1f3b3653baad6e9446b84f72be/href</a><p>I hope you guys got the basic idea of what an interface is and how to use it. Please leave your feedback.</p>\n<p>Happy Coding\u00a0:)</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f5d043789baf\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["java","interfaces","restful-api","microservices","rest-api"]}]}